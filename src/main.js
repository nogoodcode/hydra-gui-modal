/**
 * The main entry script for the package.
 */

 module.exports = function (ng) {


ng.module("hydra.gui", [])


// modal interface
.factory("Modal", [
   "$q",
   "$timeout",
   "$compile",
   "$rootScope",
   "$rootElement",
   function ModalFactory(
      $q,
      $timeout,
      $compile,
      $rootScope,
      $rootElement
   ) {
      var

            indexed = [],

            components = {},

            registering = null,

            defaults = {

               /* ===
                * Autogenerated Id
                */
               id: "",

               /* ===
                * Is the modal window active?
                */
               active: "1",

               /* ===
                * Render HTML in the body of the modal window.
                */
               html: "",


               tmpl: "",
               text: "",
               type: "alert",
               title: "",
               header: "1",

               footer: "1",

               animation: "zoomIn zoomOut-",

               static: "0",

               delay: "0",

               data: null,

               buttons: [
                  {
                        position: "header",
                        action: "header.cancel",
                        css: "float-right btn btn-sm btn-outline-secondary",
                        label: '<i class="fa fa-times"></i>'
                  },
                  {
                        position: "footer",
                        action: "footer.ok",
                        css: "float-right btn btn-sm btn-outline-primary",
                        label: "OK",
                  },
                  {
                        position: "footer",
                        action: "footer.cancel",
                        css: "float-right btn btn-sm btn-outline-secondary",
                        label: "Cancel",
                  },
               ],

            },

            Factory = {

               getDefaults: function getDefaults() {
                  return defaults;
               },

               setDefaults: function setDefaults($options) {
                  defaults = $options;
                  return this;
               },

               registerComponent: function registerComponent($ctrl) {

                  components[$ctrl.id] = $ctrl;
                  $ctrl._index = indexed.length;
                  indexed.push($ctrl);

                  if (registering) {

                        // call the modal popup again
                        Factory.custom(
                           registering.options,
                           registering.which,
                           registering.defer
                        );

                        registering = null;
                  }

                  return this;
               },

               getComponentByIndex: function getComponentByIndex($which) {
                  return indexed[$which];
               },

               getComponentById: function getComponentById($id) {
                  return components[$id];
               },

               removeComponent: function removeComponent($ctrl) {
                  delete (components[$ctrl.id]);
                  indexed.splice($ctrl._index, 1);
                  return this;
               },

               // just an ok message
               alert: function alert($options, $which) {

                  var btns = ng.copy(defaults.buttons);
                  $options.buttons = btns;

                  return Factory.custom($options, $which);
               },

               // yes / no - message
               confirm: function confirm($options, $which) {
                  var btns = ng.copy(defaults.buttons);
                  $options.buttons = btns;

                  return Factory.custom($options, $which);
               },

               // take user input / form
               prompt: function prompt($options, $which) {
                  var btns = ng.copy(defaults.buttons);
                  $options.buttons = btns;

                  return Factory.custom($options, $which);
               },

               // which will allow you overwrite a current component with new data ...
               // I don't know if that would ever be useful
               custom: function custom($options, $which, $deferred) {

                  var component;

                  if (!$deferred) {
                     $deferred = $q.defer();
                  }

                  if (ng.isUndefined($which)) {

                     $options._injected = true;

                     // if undefined register a new one
                     registering = {
                        options: $options,
                        which: indexed.length,
                        defer: $deferred,
                     };

                     // this is not good enough to simply "inherit" the scope ...
                     // var el = $compile("<hmodal></hmodal>")($options.scope || $rootScope);
                     var el = $compile("<hmodal></hmodal>")($rootScope.$new());

                     // passing may work but we can get to it from the $ctrl
                     // var el = $compile("<hmodal scope='ns'></hmodal>")($options.scope || $rootScope);

                     $rootElement.append(el);

                     if ($options.scope) {
                        console.log("scope", $options.scope);
                     }

                     // wait until registered
                     return $deferred.promise;
                        
                  } else if (ng.isString($which)) {
                        // take the named component
                        component = components[$which] || null;
                  } else if (ng.isNumber($which)) {
                        // take the indexed component
                        component = indexed[$which] || null;
                  }

                  if (!component) {
                        // fail ...
                        return $q.reject(
                           "The requested modal component is not registered.");
                  }


                  $options.deferred = $deferred;

                  // combine options with component
                  ng.extend(component, $options);

                  console.log("call model", component);

                  // return the promise
                  return $deferred.promise;

               },
            };

      return Factory;
   }
])

/* ===
 * NOT NEEDED
.component("hmodalwrap", {

   template: [

   ].join(" \n")

})
*/

// modal component
.component("hmodal", {

   template: [
      '<div',
         'ng-if="$ctrl.active"',
         'class="overlay"',
      '>',
      // TODO - add animation option
         '<div',
            'ng-if="$ctrl.active == \'1\'"',
            'ng-attr-id=""',
            'ng-class="[\'modal d-block\']"',
            'ng-click="$ctrl.click(\'_overlay\')"',
         '>',
            '<div class="modal-dialog modal-lg" role="document" ng-click="$event.stopImmediatePropagation(); $event.preventDefault();">',
               '<div class="modal-content">',
                  '<div class="modal-header" ng-if="$ctrl.header == \'1\' || $ctrl.title">',
                     '<h5 class="modal-title h6">{{ $ctrl.title }}</h5>',
                     '<button ',
                        'ng-repeat="btn in $ctrl.buttons"',
                        'ng-if="btn.position == \'header\'"',
                        'ng-class="[btn.css]"',
                        'ng-bind-html="btn.label"',
                        'ng-click="$ctrl.click(btn.action || btn.label)"',
                     '></button>',
                  '</div>',
                  '<div class="modal-body">',

                     // load template
                     '<div ng-if="$ctrl.tmpl">',
                        '<ng-include',
                           'src="$ctrl.tmpl"',
                           'onload="$ctrl.tmplLoad()"',
                        '></ng-transclude>',
                     '</div>',

                     // load html
                     '<div ng-if="$ctrl.html">',
                        '<hhtml',
                        'html="$ctrl.html"',
                        'scope="$ctrl.data"',
                        '></hhtml>',
                     '</div>',

                     // load text
                     '<div ng-if="$ctrl.text">',
                        '{{ $ctrl.text }}',
                     '</div>',

                  // transcluded html
                  '<div ng-transclude></div>',
               '</div>',
      '<div class="modal-footer" ng-if="$ctrl.footer == \'1\'">',
      '<button ',
      'ng-repeat="btn in $ctrl.buttons"',
      'ng-if="btn.position == \'footer\'"',
      'ng-class="[btn.css, \'btn btn-sm\']"',
      'ng-bind-html="btn.label"',
      'ng-click="$ctrl.click(btn.action)"',
      '></button>',
      '</div>',
      '</div>',
      '</div>',
      '</div>',
      '</div>',
   ].join(" \n"),

   bnidings: {

      id: "<",

      type: "<",

      buttons: "<",

      animation: "<",

      static: "<",

      header: "<",

      footer: "<",

      delay: "<",

      title: "<",

      data: "<",

      // scope: "<",

      // body elements

      html: "<",

      tmpl: "<",

      text: "<"

   },

   transclude: true,

   /*
   require: {
      parent: "^modalWrap",
   },
   */

   controller: [
      "$scope",
      "$timeout",
      "$document",
      "$element",
      "hyUtil",
      "hyModal",
      function Modal(
         $scope,
         $timeout,
         $document,
         $element,
         hyUtil,
         hyModal
      ) {
         var $ctrl = this;

         $ctrl.$onInit = function onInit() {

            // set the options
            var def = Modal.getDefaults();
            Util.extendIfUndefined($ctrl, def);

            // set unique id
            $ctrl.id = "modal-" + Util.getInt();

            // set active
            $ctrl.active = true;

            // register the component
            Modal.registerComponent($ctrl);

            // it's possible that the scope has now been set ... so update
            if ($ctrl.scope) {
               Util.extendIfUndefined($scope, $ctrl.scope);
            }

         };

         $ctrl.$onDestroy = function onDestroy() {
            // not sure how to get this to auto call ...
         };

         $scope.$watch("$ctrl.active", function (newVal, oldVal) {
            var body = ng.element($document[0].body);
            if (newVal) {
               body.addClass("modal-open");
            } else {
               body.removeClass("modal-open");
            }
         });

         $ctrl.click = function click($what) {

            var status = true;

            // which button was clicked ?

            if (
               ($what == "_overlay" && !$ctrl.static) ||
               $what == "header.cancel" ||
               $what == "footer.cancel"
            ) {

               status = false;

               $ctrl.active = false;

               // if we were injected into the dom - remove everything
               if ($ctrl._injected) {
                     $element.remove();
                     Modal.removeComponent($ctrl);
               }

               $ctrl.deferred.resolve({
                  status: status,
               });
            }

            // TODO - make sure everything is good to resolve the promise
            else if (
               $what == "footer.ok"
            ) {

               // is it a bad idea to return the entire scope - memory leak?
               // how about we return a copied version of the scope instead ... todo

               $ctrl.deferred.promise.finally(function () {
                     $ctrl.active = false;
                     // clear up
               });

               $ctrl.deferred.resolve({
                     status: status,
                     data: $scope,
               });
            }

         }

      }
   ]});

 };